#!/usr/bin/env python 
# Google Earth Engine Python API wrapper to allow clients to use the results of the GEE API
import web, json, sys, re, datetime, urllib, psycopg2, ast, ee, uuid, cPickle, logging, earthEngine, glob, cairosvg, serviceRequest
from earthEngine import GoogleEarthEngineError
from serviceRequest import DopaServicesError
from ee import EEException
from psycopg2 import ProgrammingError, DataError, IntegrityError, extensions, OperationalError
from dbconnect import dbconnect, google_earth_engine

#=====================  CONSTANTS  ==================================================================================================================================================================================================================

CAS_SERVER = "https://intragate.ec.europa.eu"
WEBPY_COOKIE_NAME = "webpy_session_id"

#=====================  URL HANDLERS  ==================================================================================================================================================================================================================

urls = (
  "/createDownloadFile", "createDownloadFile",
  "/downloadFile", "downloadFile",
  "/updatehsv", "updatehsv",
  "/getDatesForBB", "getDatesForBB",
  "/getDatesForPoint", "getDatesForPoint",
  "/getScenesForPoint", "getScenesForPoint",
  "/getValuesForPoint", "getValuesForPoint",
  "/getValuesForPoints", "getValuesForPoints",
  "/getValuesForPolygon", "getValuesForPolygon",
  "/createValidationSites", "createValidationSites",
  "/WMS_image", "gee_WMS_image",
  "/WMS_sequence", "gee_WMS_sequence",
  "/WMS_video", "gee_WMS_video",
  "/svg2png", "svg2png",
  "/(.+)/(.+)", "getservice",
  "/(.+)/", "getservices",
  "/", "getschemas"
)

app = web.application(urls, locals()) 
session = web.session.Session(app, web.session.DiskStore('../../htdocs/mstmp/restSessions'))  

#=====================  GET SCHEMAS CLASS  ==================================================================================================================================================================================================================

class getschemas:
    def GET(self):
        try:
            render = web.template.render('templates/')
            conn = dbconnect("species_especies_schema")
            conn.cur.callproc("utils.dopa_rest_getschemas")
            schemas = conn.cur.fetchall()
            schemasdict = [dict([('name', schema[0]), ('description', schema[1])]) for schema in schemas]
            return render.getschemas(schemasdict, render.header(), render.footer())
        
        except (DopaServicesError, ProgrammingError, OperationalError):
            return "DOPA Services Error: " + str(sys.exc_info())

#=====================  GET SERVICES CLASS  ==================================================================================================================================================================================================================

class getservices:
    def GET(self, schemaname):
        try:
            render = web.template.render('templates/')
            conn = dbconnect("species_especies_schema")
            conn.cur.callproc("utils.dopa_rest_getservices", [schemaname])
            services = conn.cur.fetchall()
            servicesdict = [dict([('name', service[0]), ('description', getservicedescription(service[1]))]) for service in services if isVisibleServiceName(service[0])]
            return render.getservices(schemaname, servicesdict, render.header(), render.footer())

        except (DopaServicesError, ProgrammingError, OperationalError):
            return "DOPA Services Error: " + str(sys.exc_info())

#=====================  GET SERVICE CLASS  ==================================================================================================================================================================================================================

class getservice:
    def GET(self, schemaname, servicename):
        # if there are some parameters then the user is making a request for data 
        conn = dbconnect("species_especies_schema")
        if web.input():
            return serviceRequest.callservice(conn, schemaname, servicename, web.ctx.query[1:])  # pass the querystring to preserve the order of the parameters - the web.input() collection does not preserve the order
        else:
            try:
                render = web.template.render('templates/')
                conn.cur.callproc("utils.dopa_rest_getservice", [servicename])
                params = conn.cur.fetchall()
                if (len(params) == 0):
                    raise DopaServicesError('No parameters found for service ' + servicename)
                
                # parse the description text to get the parameters descriptions - the parameter descriptions are encoded using {<param_desc>$<param_desc>$<param_desc> etc}
                paramdesc = []
                paramdescgroups = re.search('{.*}', params[0][1].replace("\n", ""))  # replace line feeds otherwise the regex doesnt work
                if (paramdescgroups):
                    paramdesc = paramdescgroups.group(0)[1:-1].split("$")
                # fill in the parameter descriptions if they have not been written
                paramdesc[len(paramdesc):] = ['No description' for i in range(len(params) - len(paramdesc))] 
                
                # parse the function definition for default parameter values
                paramdefs = []
                paramdefsstr = params[0][5]
                if 'DEFAULT ' in paramdefsstr:
                    # get the position of the parameter names in the parameter definition string
                    pos = [paramdefsstr.find(param[3] + ' ') for param in params if (param[2] == 'IN')]
                    # add on the length of the parameter definition to get the last parameter definition
                    pos.append(len(paramdefsstr))
                    # get the parameter definitions as a list
                    paramdefs = [paramdefsstr[pos[i]:pos[i + 1]] for i in range(len(pos) - 1)]
                    # remove any trailing spaces with commas
                    paramdefs = [(p[:-2] if p[-2:] == ', ' else p) for p in paramdefs]
                    # remove the DEFAULT statement
                    paramdefs = [(p[p.find('DEFAULT') + 8:] if 'DEFAULT' in p else '') for p in paramdefs]
                    # remove the  ARRAY[] statement
                    paramdefs = [(p[6:-1] if 'ARRAY' in p else p) for p in paramdefs]
                    # remove any typecast symbols, e.g. ::text
#                    paramdefs = [p[:p.find('::')] if '::' in p else p for p in paramdefs] # some are complicated, e.g. ['wdpa_id integer, ', "rlstatus character[] DEFAULT ARRAY['EN'::text, 'CR'::text, 'VU'::text, 'NT'::text, 'LC'::text, 'EX'::text, 'EW'::text, 'DD'::text]"]
                    paramdefs = [p.replace("::text", "") for p in paramdefs]
                    paramdefs = [p.replace("::integer", "") for p in paramdefs]
                    paramdefs = [p.replace("::character varying", "") for p in paramdefs]
                    # remove any quotes, e.g. 'CR','DD' -> CR, DD
                    paramdefs = [p.replace("'", "") for p in paramdefs]
                    # remove any spaces, e.g. CR, DD -> CR,DD
                    paramdefs = [p.replace(" ", "") for p in paramdefs]
                # fill in the paramdefs
                paramdefs[len(paramdefs):] = ['' for i in range(len(params) - len(paramdefs))]
#                return params
                # create a dictionary containing the parameter information
                paramsdict = [dict([('mode', params[i][2]), ('name', params[i][3]), ('type', gettypefrompostgresql(params[i][4])), ('description', paramdesc[i]), ('default', paramdefs[i])]) for i in range(len(params))]
                return render.getservice(schemaname, servicename, getservicedescription(params[0][1]), [p for p in paramsdict if (p['mode'] == 'IN')], [p for p in paramsdict if (p['mode'] == 'OUT')], render.header(), render.footer())
            
            except (DopaServicesError, ProgrammingError, OperationalError):
                return "DOPA Services Error: " + str(sys.exc_info())

#=====================  HELPER FUNCTIONS  ==================================================================================================================================================================================================================
                                   
def gettypefrompostgresql(postgresqltype):  # returns a string representation of the SQL data type - this is used to show the data type in the html pages
    if (postgresqltype.lower() in ['integer', 'bigint']): return "integer"
    elif (postgresqltype.lower() in ['boolean']): return "boolean"
    elif (postgresqltype.lower() in ['single precision']): return "single"
    elif (postgresqltype.lower() in ['double precision']): return "double"
    elif (postgresqltype.lower() in ['numeric']): return "numeric"
    elif (postgresqltype.lower() in ['array']): return "array"
    elif (postgresqltype.lower() in ['character varying', 'text']): return "string"
    elif (postgresqltype.lower() in ['date']): return "date"
    elif (postgresqltype.lower() in ['timestamp with time zone']): return "datetime"
    else: return "unknown"

def getservicedescription(fulldescription):
    pos = fulldescription.find("{")
    if pos > -1:
        return fulldescription[:fulldescription.find("{")]
    else:
        return fulldescription

def isVisibleServiceName(servicename):
    if (servicename[:3] in ['get', 'set']) | (servicename[:6] in ['update', 'insert', 'delete']) | ((servicename[:4] in ['_get', '_set']) & (web.ctx.host == 'dopa-services.jrc.it')) | ((servicename[:7] in ['_update', '_insert', '_delete']) & (web.ctx.host == 'dopa-services.jrc.it')):  
        return True
    else:
        return False

def runHadoopQuery(conn, functionname, params): 
    try:
        conn.cur.execute("INSERT INTO hadoop_jobs(id, functionname, params) VALUES (DEFAULT,'" + functionname + "','" + params['quadkey'] + "') RETURNING id")
        job_id = conn.cur.fetchone()[0]  # this is the job_id value from the table
        conn.cur.execute("LISTEN hadoop_job_complete;")  # listen for the results to be posted back
        conn.cur.execute("NOTIFY hadoop_job_request,'" + str(job_id) + "," + functionname + "," + params['quadkey'] + "'")
        while 1:
            if select.select([conn.conn], [], [], 5) == ([], [], []):
                assert 'nothing'
            else:
                conn.conn.poll()
                while conn.conn.notifies:  # results posted back
                    conn.cur.execute("UNLISTEN hadoop_job_complete;")
                    resultsDict = ast.literal_eval(conn.conn.notifies.pop().payload)
                    return resultsDict['results']
    except (DopaServicesError, OperationalError):
        return "DOPA Services Error: " + str(sys.exc_info())


class createDownloadFile():
    def POST(self):
        webDataDict = dict()
        webData = web.data().split("&")
        for item in webData:
            kv = item.split("=")
            webDataDict[kv[0]] = kv[1]
        filename = webDataDict['filename']
        algorithm = webDataDict['algorithm']
        f = open(r'../../htdocs/mstmp/' + filename, 'wb')
        f.write(urllib.unquote(algorithm))
        f.close()
        return filename
    
class downloadFile():
    def GET(self):
        filename = web.input()['filename']
        f = open(r'../../htdocs/mstmp/' + filename, 'r')
        algorithm = f.read()
        f.close()
        web.header("Content-Type", "text/plain")
        web.header("Content-Disposition", "attachment; filename=%s" % filename)
        return algorithm


class updatehsv():
    def GET(self):
        hsv = web.input()['hsv']
        conn = dbconnect("species_especies_schema")
        conn.cur.execute("UPDATE especies.gee_training_data SET hue = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).hue")
        conn.cur.execute("UPDATE especies.gee_training_data SET saturation = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).saturation")
        conn.cur.execute("UPDATE especies.gee_training_data SET val = (gethsv(band" + hsv[0] + ",band" + hsv[1] + ",band" + hsv[2] + ")).val")
        return "Done"

class svg2png:
    def POST(self):
        svg = web.data()
        filename = str(uuid.uuid4()) + ".png"
        cairosvg.svg2png (svg , write_to='../../htdocs/mstmp/' + filename)
        if (web.ctx.host == "dopa-services.jrc.it"):
            domain = "lrm-maps.jrc.it/"
        else:
            domain = "lrm-maps.jrc.ec.europa.eu/"
        url = "http://" + domain + "/mstmp/" + filename
        return url

class getDatesForBB:  # http://dopa-services.jrc.it/gee/getDatesForBB?BBOX=114,5,115,6&CRS=EPSG:4326
    def GET(self):
        ll_x, ll_y, ur_x, ur_y = web.input()['BBOX'].split(",")
        dates = earthEngine.getDatesForBB(ll_x, ll_y, ur_x, ur_y, web.input()['CRS'])
        if 'callback' in web.input().keys():
            return web.input()['callback'] + "({'dates':['" + "','".join([d for d in dates]) + "']})"  # return as a jsonp
        else:
            return "{'dates':['" + "','".join([d for d in dates]) + "']}"  

class getDatesForPoint:  # http://dopa-services.jrc.it/gee/getDatesForPoint?POINT=114,5&CRS=EPSG:4326
    def GET(self):
        x, y = web.input()['POINT'].split(",")
        dates = earthEngine.getDatesForPoint(x, y, web.input()['CRS'])
        if 'callback' in web.input().keys():
            return web.input()['callback'] + "({'dates':['" + "','".join([d for d in dates]) + "']})"  # return as a jsonp
        else:
            return "{'dates':['" + "','".join([d for d in dates]) + "']}"  

class getScenesForPoint:  # http://dopa-services.jrc.it/gee/getScenesForPoint?POINT=14.84368017499996,-3.990951058630029&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T
    def GET(self):
        x, y = web.input()['POINT'].split(",")
        scenes = earthEngine.getScenesForPoint(web.input()['collection'], x, y, web.input()['CRS'])
#         return scenes['features'][0]['properties']['DATE_ACQUIRED']
        return serviceRequest.getJsonResponse(json.dumps(scenes))

class getValuesForPoint:  # http://dopa-services.jrc.it/gee/getValuesForPoint?sceneid=L7_L1T%2FLE70310432001166EDC01&POINT=-105.83545,24.42247&CRS=EPSG:4326
    def GET(self):
        params = web.input()
        x, y = web.input()['POINT'].split(",")
        vals = earthEngine.getValuesForPoint(params['sceneid'], x, y, web.input()['CRS'])
        return serviceRequest.getJsonResponse(json.dumps(vals))
            
class getValuesForPoints:  # http://dopa-services.jrc.it/gee/getValuesForPoints?sceneid=L7_L1T%2FLE70310432001166EDC01&points=[[-105.83545,24.42247],[-105.84545,24.42247]]
    def GET(self):
        params = web.input()
        pointsArray = ast.literal_eval(params['points'])
        vals = earthEngine.getValuesForPoints(params['sceneid'], pointsArray)
        return serviceRequest.getJsonResponse(json.dumps(vals))

class getValuesForPolygon:  # 
    def GET(self):
        return 'not yet implemented'

class gee_WMS_image:  # returns a url to an image created by google earth engine
    def GET(self):
        try:
            logging.basicConfig(filename='../../htdocs/mstmp/earthEngine.log', level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s',)
            # PARAMETER PARSING
            wmsParameters = wmsParams(web.input())  # get the WMS parameters
            layerParameters = ast.literal_eval(wmsParameters.layers)
            # SET THE BOUNDING BOX
            if wmsParameters.version == "1.3.0":  # get the ll and ur x/y coordinates
                ll_x, ll_y, ur_x, ur_y = wmsParameters.bbox.split(",")
            else:
                ll_x, ll_y, ur_x, ur_y = wmsParameters.bbox.split(",")  # same for the moment
            # GET THE IMAGE THUMBNAIL 
            logging.info("GEE image request: ll_x=" + ll_x + "  ll_y=" + ll_y + " ur_x=" + ur_x + " ur_y=" + ur_y + " crs=" + wmsParameters.crs + " width=" + str(wmsParameters.width) + " height=" + str(wmsParameters.height) + " layerParameters=" + str(layerParameters))
            output_thumbnail = earthEngine.getImage(float(ll_x), float(ll_y), float(ur_x), float(ur_y), wmsParameters.crs, wmsParameters.width, wmsParameters.height, layerParameters)
            logging.info("GEE image request complete")
            # RETURN A LINK TO THE THUMBNAIL 
            return returnThumbnailJSON(output_thumbnail)

        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        

class gee_WMS_sequence():  # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=-480654,1687548&CRS=EPSG:102100&collection=LANDSAT/LC8_L1T
    # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=32.84882974169116,14.36796906455707&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T #for Sudan
    # http://dopa-services.jrc.it/gee/WMS_sequence?POINT=-4.364599555187313,14.683008234697786&CRS=EPSG:4326&collection=LANDSAT/LC8_L1T #for Mopti Mali
    def GET(self):
        try:
            x, y = web.input()['POINT'].split(",")
            scenes = earthEngine.getScenesForPoint(web.input()['collection'], x, y, web.input()['CRS'])
            layerParameters = {"hsvDetect":True}
            for scene in scenes['features']:
                sceneid = scene['id']
                ll_x = scene['properties']['CORNER_LL_LON_PRODUCT']
                ll_y = scene['properties']['CORNER_LL_LAT_PRODUCT']
                ur_x = scene['properties']['CORNER_UR_LON_PRODUCT']
                ur_y = scene['properties']['CORNER_UR_LAT_PRODUCT']
                date_acquired = scene['properties']['DATE_ACQUIRED']
                output_thumbnail = earthEngine.getSceneImage(sceneid, ll_x, ll_y, ur_x, ur_y, "EPSG:4326", "1000", "1000", layerParameters)
                filename = urllib.urlretrieve(output_thumbnail, '../../htdocs/mstmp/landsat_' + date_acquired + '.png')
            imgFiles = glob.glob('../../htdocs/mstmp/landsat_*.png')
            return filename
        
        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        

class gee_WMS_video():
    def GET(self):
        try:
#             sys.path.append('/usr/local/src/opencv-2.4.8')
            images = glob.glob ('/srv/www/htdocs/mstmp/landsat_*.png')
            img = cv2.imread(images[0])
            height , width , layers = img.shape
            video = cv2.VideoWriter('/srv/www/htdocs/mstmp/video.avi', -1, 1, (width, height))
            for image in images:
                video.write(cv2.imread(image))
            cv2.destroyAllWindows()  # giving an error at the moment
            video.release()
            return "done"

        except (DopaServicesError, ProgrammingError, EEException):
            return "DOPA Services Error: " + str(sys.exc_info())        
                
class createValidationSites:  # http://dopa-services.jrc.it/gee/createValidationSites?sceneid=LANDSAT%2FLC8_L1T%2FLC81970502013330LGN00&scenedate=2013-11-26%2010%3A39%3A38.1039567Z&draftSites=%5B%5B-4.113173959020702%2C14.960465199416%2C%22Waterbodies%22%5D%2C%5B-4.258742806677007%2C14.927294080825337%2C%22Waterbodies%22%5D%2C%5B-4.210677621130114%2C14.862263844590363%2C%22Waterbodies%22%5D%5D&callback=dojo_request_script_callbacks.dojo_request_script7&username=Andrew%20Cottam
    def GET(self):
        try:
            # GET THE INPUT PARAMETERS
            params = web.input()
            username = params['username']
            scenedate = params['scenedate']
            sceneid = params['sceneid']
            s = sceneid[sceneid.find('/') + 1:sceneid.find('/') + 3]
            if s == "LC":
                sensor = "Landsat 8"
            elif s == "L5":
                sensor = "Landsat 5"
                raise DopaServicesError('Creating validation sites is currently not implemented for Landsat 5') 
            elif s == "L7":
                sensor = "Landsat 7"
                raise DopaServicesError('Creating validation sites is currently not implemented for Landsat 7') 
            # GET THE POINTS
            sitesArray = ast.literal_eval(params['draftSites'])  # the the array of draft sites
            lc = [item[2] for item in sitesArray]  # get the land cover types from the array
            pointsArray = [[item[0], item[1]] for item in sitesArray]  # get the array of points from the draft sites
            data = earthEngine.getValuesForPoints(params['sceneid'], pointsArray)  # send these to GEE to get the pixel values
            if len(data) == 1:
                raise DopaServicesError('No validation sites created. Google Earth Engine did not have any pixel data for the passed geometries')
            fields = data[0]  # get the fields returned from GEE
            fieldValues = data[1:]  # get the field values returned from GEE
            insertinto = "INSERT INTO gee_training_data(land_cover, lat, lng, sensor, sceneid, image_date, band1, band2, band3, band4, band5, band6, band7, band8, band9, band10, band11, bqa, username, entry_date, hue, saturation,val) VALUES"
            values = ""
            for i in range(len(data[1:])):  # create the VALUES (''),('') statement
                values = values + "('" + lc[i] + "'," + str(fieldValues[i][2]) + "," + str(fieldValues[i][1]) + ",'" + sensor + "','" + sceneid + "','" + scenedate + "'"
                for j in range(len(fields[4:])):  # iterate through the bands pixel values to write the string
                    value = fieldValues[i][j + 4]
                    if (value):
                        values = values + "," + str(value)
                    else:
                        raise DopaServicesError('No data for band ' + str(j + 1))
                h, s, v = rgbTohsv(fieldValues[i][10], fieldValues[i][8], fieldValues[i][7])  # bands B7, B5, B4 for Landsat 8
                values = values + ",'" + username + "','" + str(datetime.datetime.now()) + "'," + str(h) + "," + str(s) + "," + str(v) + "),"
            sql = insertinto + values[:-1]
#             return sql
            conn = dbconnect("species_especies_schema")
            conn.cur.execute(sql)
            responsejson = json.dumps({'rowcount':conn.cur.rowcount})
            return serviceRequest.getJsonResponse(responsejson)
                        
        except (DopaServicesError, GoogleEarthEngineError) as e:
            return serviceRequest.returnError("metadata", "records", 0, e.message)        
    
class wmsParams:  # class to retrieve the standard wms parameters
    def __init__(self, parameters):
        self.style = parameters['STYLES']
        self.service = parameters['SERVICE']
        self.crs = parameters['CRS']
        self.format = parameters['FORMAT']
        self.request = parameters['REQUEST']
        self.height = parameters['HEIGHT']
        self.width = parameters['WIDTH']
        self.version = parameters['VERSION']
        self.bbox = parameters['BBOX']
        self.transparent = parameters['TRANSPARENT']
        self.layers = parameters['LAYERS']  # {"sceneid":"LANDSAT/LC8_L1T_TOA/LC81970502014109LGN00","redBand":"B4","greenBand":"B3","blueBand":"B2","min":0,"max":0.4}
    
def returnThumbnailJSON(url):
    params = serviceRequest.getQueryStringParams(web.ctx.query[1:])  # get the querystring parameters to get the callback function name
    responsejson = json.dumps({"url":url})
    return serviceRequest.getJsonResponse(responsejson)

def createGoogleAPIJson():
    gee_authenticate()
    f = open(r'google earth engine/_api.pickle', 'wb')
    cPickle.dump(ee.ApiFunction._api, f)
    f.close()

def rgbTohsv(r, g, b):  # utility function to convert rgb values to hsv values
    maxVal = float(max(r, g, b))
    minVal = float(min(r, g, b))
    val = maxVal
    saturation = (val - minVal) / maxVal
    if val == minVal:
        hue = 0
    elif val == r:
        hue = ((((g - b) / (val - minVal)) * 60) + 360) % 360
    elif val == g:
        hue = (((b - r) / (val - minVal) * 60) + 120)
    elif val == b:
        hue = (((r - g) / (val - minVal) * 60) + 240)
    return (hue, saturation, val)

if __name__ == "__main__":
    app.run()
